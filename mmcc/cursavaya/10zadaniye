import numpy as np
import math

def mm1_delay(lmbd, capacity):
    """
    Задержка M/M/1 ~ 1 / (capacity - lmbd), если capacity > lmbd.
    Иначе считаем delay -> inf.
    """
    if capacity <= lmbd:
        return float('inf')
    return 1.0 / (capacity - lmbd)

def objective_function(B_matrix, A_matrix, T_opt=0.05):
    """
    Вычисляем целевую функцию:
    O = sum_{i,j} (T_ij - T_opt)^2,
    где T_ij - задержка M/M/1.
    :param B_matrix: матрица пропускных способностей (бит/с).
    :param A_matrix: матрица нагрузок (бит/с).
    :param T_opt: желаемая задержка (50 мс = 0.05 с).
    :return: значение O (float).
    """
    n = B_matrix.shape[0]
    O_val = 0.0
    for i in range(n):
        for j in range(n):
            if i != j:
                delay_ij = mm1_delay(A_matrix[i, j], B_matrix[i, j])
                O_val += (delay_ij - T_opt)**2
    return O_val

def optimize_capacity(B_init, A_matrix, T_opt=0.05, step=10000, iterations=10):
    """
    Пример простого итерационного алгоритма оптимизации:
      1) Считаем текущее значение O (objective).
      2) Ищем (i,j), где |delay(i,j) - T_opt| максимально (т.е. самое «узкое» место).
      3) Увеличиваем B[i,j] на 'step'.
      4) Повторяем заданное число итераций.
    """
    B = B_init.copy()
    n = B.shape[0]

    for it in range(iterations):
        # 1) Считаем текущее значение O
        O_current = objective_function(B, A_matrix, T_opt)
        print(f"Итерация {it+1}: текущее O = {O_current:.9f}")

        # 2) Находим (i,j) с наибольшей |delay - T_opt|
        max_delta = -1
        max_i, max_j = 0, 0
        for i in range(n):
            for j in range(n):
                if i == j:
                    continue
                d_ij = mm1_delay(A_matrix[i, j], B[i, j])
                delta_ij = abs(d_ij - T_opt)
                if delta_ij > max_delta:
                    max_delta = delta_ij
                    max_i, max_j = i, j

        # 3) Увеличиваем B[max_i, max_j] на step
        B[max_i, max_j] += step
        # Если нужно учитывать симметрию:
        # B[max_j, max_i] = B[max_i, max_j]

    # Возвращаем итоговую матрицу B
    final_O = objective_function(B, A_matrix, T_opt)
    print(f"\nИтоговая целевая функция после {iterations} итераций: {final_O:.9f}")
    return B

def print_matrix_table(matrix):
    """
    Печатает матрицу в псевдотабличном ASCII-формате с разделителями.
    """
    n = matrix.shape[0]
    # Формируем «шапку» с заголовками колонок
    header = ["Col " + str(j) for j in range(n)]
    # Ширина столбца (примерно, можно подогнать под ваши данные)
    col_width = 12  

    # Печать верхней границы
    print("+" + "+".join(["-" * col_width for _ in range(n+1)]) + "+")
    # Печать заголовка (первая ячейка пустая, в ней будет "Row")
    print("|".join([
        f"{'':{col_width}}"
    ] + [
        f"{h:^{col_width}}"  # центрируем заголовок
        for h in header
    ]) + "|")
    # Печать разделительной линии под заголовком
    print("+" + "+".join(["-" * col_width for _ in range(n+1)]) + "+")

    # Печать строк
    for i in range(n):
        row_data = []
        # Первая колонка: Row i
        row_data.append(f"Row {i}")
        # Затем значения матрицы
        for j in range(n):
            row_data.append(f"{int(matrix[i,j]):{col_width}}")
        # Формируем строку
        row_str = "|".join([
            f"{row_data[0]:{col_width}}"
        ] + row_data[1:])
        print(f"|{row_str}|")

    # Нижняя граница таблицы
    print("+" + "+".join(["-" * col_width for _ in range(n+1)]) + "+")


if __name__ == "__main__":
    # === Исходные данные ===
    # Матрица A (20×20) - ваша нагрузка, бит/с (из пункта 8)
    A_matrix_example = np.array([
        [      0., 3081600., 4964800., 6676800., 5735200., 5307200., 1712000., 1284000.,
          5392800., 6248800., 7019200., 6163200., 5735200., 6334400., 4708000., 2482400.,
          6334400., 5992000., 2824800., 5735200.],
        [3081600.,       0., 2140000., 2824800., 2482400., 2311200.,  856000.,  684800.,
          2311200., 2653600., 2996000., 2653600., 2482400., 2739200., 2054400., 1198400.,
          2739200., 2568000., 1284000., 2482400.],
        [4964800., 2140000.,       0., 4536800., 3937600., 3680800., 1198400.,  941600.,
          3680800., 4280000., 4793600., 4194400., 3937600., 4365600., 3252800., 1797600.,
          4365600., 4108800., 2054400., 3937600.],
        [6676800., 2824800., 4536800.,       0., 5221600., 4793600., 1540800., 1198400.,
          4879200., 5735200., 6334400., 5649600., 5221600., 5735200., 4280000., 2311200.,
          5735200., 5478400., 2568000., 5221600.],
        [5735200., 2482400., 3937600., 5221600.,       0., 4194400., 1369600., 1027200.,
          4194400., 4879200., 5478400., 4879200., 4536800., 4964800., 3766400., 1968800.,
          4964800., 4708000., 2311200.,   85600.],
        [5307200., 2311200., 3680800., 4793600., 4194400.,       0., 1284000., 1027200.,
          3937600., 4536800., 5050400., 4536800., 4194400., 4536800., 3509600., 1883200.,
          4622400., 4365600., 2140000., 4194400.],
        [1712000.,  856000., 1198400., 1540800., 1369600., 1284000.,       0.,  428000.,
          1284000., 1455200., 1626400., 1455200., 1369600., 1455200., 1198400.,  684800.,
          1455200., 1455200.,  770400., 1369600.],
        [1284000.,  684800.,  941600., 1198400., 1027200., 1027200.,  428000.,       0.,
          1027200., 1112800., 1284000., 1112800., 1027200., 1112800.,  941600.,  599200.,
          1112800., 1112800.,  599200., 1027200.],
        [5392800., 2311200., 3680800., 4879200., 4194400., 3937600., 1284000., 1027200.,
                0., 4622400., 5136000., 4536800., 4194400., 4622400., 3509600., 1883200.,
          4622400., 4365600., 2140000., 4194400.],
        [6248800., 2653600., 4280000., 5735200., 4879200., 4536800., 1455200., 1112800.,
          4622400.,       0., 5992000., 5307200., 4964800., 5392800., 4108800., 2140000.,
          5478400., 5136000., 2482400., 4879200.],
        [7019200., 2996000., 4793600., 6334400., 5478400., 5050400., 1626400., 1284000.,
          5136000., 5992000.,       0., 5906400., 5478400., 6077600., 4536800., 2396800.,
          6077600., 5735200., 2739200., 5478400.],
        [6163200., 2653600., 4194400., 5649600., 4879200., 4536800., 1455200., 1112800.,
          4536800., 5307200., 5906400.,       0., 5392800., 5906400., 4451200., 2311200.,
          5906400., 5564000., 2653600., 4879200.],
        [5735200., 2482400., 3937600., 5221600., 4536800., 4194400., 1369600., 1027200.,
          4194400., 4964800., 5478400., 5392800.,       0., 5649600., 3766400., 2054400.,
          5649600., 5307200., 2568000., 4536800.],
        [6505600., 2739200., 4365600., 5735200., 4964800., 4536800., 1455200., 1112800.,
          4622400., 5392800., 6077600., 5906400., 5649600.,       0., 4194400., 2225600.,
          5992000., 5735200., 2739200., 4964800.],
        [4879200., 2054400., 3252800., 4280000., 3766400., 3509600., 1198400.,  941600.,
          3509600., 4108800., 4536800., 4451200., 3766400., 4194400.,       0., 1712000.,
          4194400., 4023200., 1968800., 3766400.],
        [2482400., 1198400., 1797600., 2311200., 1968800., 1883200.,  684800.,  599200.,
          1883200., 2140000., 2396800., 2311200., 2054400., 2225600., 1712000.,       0.,
          2225600., 2140000., 1112800., 1968800.],
        [6334400., 2739200., 4365600., 5735200., 4964800., 4622400., 1455200., 1112800.,
          4622400., 5478400., 6077600., 5906400., 5649600., 5992000., 4194400., 2225600.,
                0., 5820800., 2824800., 4964800.],
        [5992000., 2568000., 4108800., 5478400., 4708000., 4365600., 1455200., 1112800.,
          4365600., 5136000., 5735200., 5564000., 5307200., 5735200., 4023200., 2140000.,
          5820800.,       0., 2653600., 4708000.],
        [2824800., 1284000., 2054400., 2568000., 2311200., 2140000.,  770400.,  599200.,
          2140000., 2482400., 2739200., 2653600., 2568000., 2739200., 1968800., 1112800.,
          2824800., 2653600.,       0., 2311200.],
        [5735200., 2482400., 3937600., 5221600.,   85600., 4194400., 1369600., 1027200.,
          4194400., 4879200., 5478400., 4879200., 4536800., 4964800., 3766400., 1968800.,
          4964800., 4708000., 2311200.,       0.],
    ], dtype=float)

    # Матрица B_init (20×20) - ваша начальная пропускная способность (из пункта 9)
    B_init_example = np.array([
        [  16000., 3097600., 4980800., 6692800., 5751200., 5323200., 1728000., 1300000.,
          5408800., 6264800., 7035200., 6179200., 5751200., 6350400., 4724000., 2498400.,
          6350400., 6008000., 2840800., 5751200.],
        [3097600.,   16000., 2156000., 2840800., 2498400., 2327200.,  872000.,  700800.,
          2327200., 2669600., 3012000., 2669600., 2498400., 2755200., 2070400., 1214400.,
          2755200., 2584000., 1300000., 2498400.],
        [4980800., 2156000.,   16000., 4552800., 3953600., 3696800., 1214400.,  957600.,
          3696800., 4296000., 4809600., 4210400., 3953600., 4381600., 3268800., 1813600.,
          4381600., 4124800., 2070400., 3953600.],
        [6692800., 2840800., 4552800.,   16000., 5237600., 4809600., 1556800., 1214400.,
          4895200., 5751200., 6350400., 5665600., 5237600., 5751200., 4296000., 2327200.,
          5751200., 5494400., 2584000., 5237600.],
        [5751200., 2498400., 3953600., 5237600.,   16000., 4210400., 1385600., 1043200.,
          4210400., 4895200., 5494400., 4895200., 4552800., 4980800., 3782400., 1984800.,
          4980800., 4724000., 2327200.,  101600.],
        [5323200., 2327200., 3696800., 4809600., 4210400.,   16000., 1300000., 1043200.,
          3953600., 4552800., 5066400., 4552800., 4210400., 4552800., 3525600., 1899200.,
          4638400., 4381600., 2156000., 4210400.],
        [1728000.,  872000., 1214400., 1556800., 1385600., 1300000.,   16000.,  444000.,
          1300000., 1471200., 1642400., 1471200., 1385600., 1471200., 1214400.,  700800.,
          1471200., 1471200.,  786400., 1385600.],
        [1300000.,  700800.,  957600., 1214400., 1043200., 1043200.,  444000.,   16000.,
          1043200., 1128800., 1300000., 1128800., 1043200., 1128800.,  957600.,  615200.,
          1128800., 1128800.,  615200., 1043200.],
        [5408800., 2327200., 3696800., 4895200., 4210400., 3953600., 1300000., 1043200.,
             16000., 4638400., 5152000., 4552800., 4210400., 4638400., 3525600., 1899200.,
          4638400., 4381600., 2156000., 4210400.],
        [6264800., 2669600., 4296000., 5751200., 4895200., 4552800., 1471200., 1128800.,
          4638400.,   16000., 6008000., 5323200., 4980800., 5408800., 4124800., 2156000.,
          5494400., 5152000., 2498400., 4895200.],
        [7035200., 3012000., 4809600., 6350400., 5494400., 5066400., 1642400., 1300000.,
          5152000., 6008000.,   16000., 5922400., 5494400., 6093600., 4552800., 2412800.,
          6093600., 5751200., 2755200., 5494400.],
        [6179200., 2669600., 4210400., 5665600., 4895200., 4552800., 1471200., 1128800.,
          4552800., 5323200., 5922400.,   16000., 5408800., 5922400., 4467200., 2327200.,
          5922400., 5580000., 2669600., 4895200.],
        [5751200., 2498400., 3953600., 5237600., 4552800., 4210400., 1385600., 1043200.,
          4210400., 4980800., 5494400., 5408800.,   16000., 5665600., 3782400., 2070400.,
          5665600., 5323200., 2584000., 4552800.],
        [6521600., 2755200., 4381600., 5751200., 4980800., 4552800., 1471200., 1128800.,
          4638400., 5408800., 6093600., 5922400., 5665600.,   16000., 4210400., 2241600.,
          6008000., 5751200., 2755200., 4980800.],
        [4895200., 2070400., 3268800., 4296000., 3782400., 3525600., 1214400.,  957600.,
          3525600., 4124800., 4552800., 4467200., 3782400., 4210400.,   16000., 1728000.,
          4210400., 4039200., 1984800., 3782400.],
        [2498400., 1214400., 1813600., 2327200., 1984800., 1899200.,  700800.,  615200.,
          1899200., 2156000., 2412800., 2327200., 2070400., 2241600., 1728000.,   16000.,
          2241600., 2156000., 1128800., 1984800.],
        [6350400., 2755200., 4381600., 5751200., 4980800., 4638400., 1471200., 1128800.,
          4638400., 5494400., 6093600., 5922400., 5665600., 6008000., 4210400., 2241600.,
             16000., 5836800., 2840800., 4980800.],
        [6008000., 2584000., 4124800., 5494400., 4724000., 4381600., 1471200., 1128800.,
          4381600., 5152000., 5751200., 5580000., 5323200., 5751200., 4039200., 2156000.,
          5836800.,   16000., 2669600., 4724000.],
        [2840800., 1300000., 2070400., 2584000., 2327200., 2156000.,  786400.,  615200.,
          2156000., 2498400., 2755200., 2669600., 2584000., 2755200., 1984800., 1128800.,
          2840800., 2669600.,   16000., 2327200.],
        [5751200., 2498400., 3953600., 5237600.,  101600., 4210400., 1385600., 1043200.,
          4210400., 4895200., 5494400., 4895200., 4552800., 4980800., 3782400., 1984800.,
          4980800., 4724000., 2327200.,   16000.],
    ], dtype=float)

    # Параметры оптимизации
    T_opt = 0.05       # желаемая задержка
    step = 200000      # «шаг» увеличения пропускной способности (например, 200000 бит/с)
    iterations = 10    # число итераций

    # Сумма пропускных способностей до оптимизации
    initial_sum = np.sum(B_init_example)

    # Запускаем оптимизацию
    B_optimized = optimize_capacity(
        B_init_example,
        A_matrix_example,
        T_opt=T_opt,
        step=step,
        iterations=iterations
    )

    # Печатаем оптимизированную матрицу в «таблицу»
    print("\nОптимизированная матрица B:\n")
    print_matrix_table(B_optimized)

    # Сумма пропускных способностей после оптимизации
    final_sum = np.sum(B_optimized)
    difference = final_sum - initial_sum

    print(f"\nСуммарная пропускная способность ДО оптимизации: {initial_sum:.0f} бит/с")
    print(f"Суммарная пропускная способность ПОСЛЕ оптимизации: {final_sum:.0f} бит/с")
    print(f"Разница: +{difference:.0f} бит/с")

    # Небольшое объяснение
    print("\nПояснения:")
    print("1) Количество итераций (iterations) определяет, сколько раз мы подряд ищем самое «узкое» место в сети")
    print("   (где задержка максимально отличается от T_opt) и увеличиваем пропускную способность именно там.")
    print("2) Шаг увеличения пропускной способности (step) задаёт, насколько резко мы «добавляем» ресурсы на канале,")
    print("   чтобы уменьшить задержку. Чем больше step, тем быстрее может быть достигнута какая-то приемлемая точка.")
    print("   Однако слишком большой шаг может вызвать «скачки» и нестабильность при определённых сценариях.\n")
