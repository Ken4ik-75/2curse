import numpy as np

def calculate_link_capacity(A_packet, L, T0):
    """
    Расчёт пропускной способности линии:
    B_ij = A_ij + L / T0,
    где A_ij - интенсивность пакетного трафика из пункта 8 (бит/с).
    :param A_packet: матрица A_ij (бит/с).
    :param L: длина пакета (бит).
    :param T0: допустимая задержка (с).
    :return: матрица B_ij (бит/с).
    """
    n = A_packet.shape[0]
    B_matrix = np.zeros((n, n), dtype=float)
    reserve = L / T0  # добавляемая величина L/T0
    for i in range(n):
        for j in range(n):
            B_matrix[i, j] = A_packet[i, j] + reserve
    return B_matrix

if __name__ == "__main__":
    # Ваша матрица интенсивности пакетного трафика (20×20), бит/с:
    A_packet_example = np.array([
        [      0., 3081600., 4964800., 6676800., 5735200., 5307200., 1712000., 1284000.,
          5392800., 6248800., 7019200., 6163200., 5735200., 6334400., 4708000., 2482400.,
          6334400., 5992000., 2824800., 5735200.],
        [3081600.,       0., 2140000., 2824800., 2482400., 2311200.,  856000.,  684800.,
          2311200., 2653600., 2996000., 2653600., 2482400., 2739200., 2054400., 1198400.,
          2739200., 2568000., 1284000., 2482400.],
        [4964800., 2140000.,       0., 4536800., 3937600., 3680800., 1198400.,  941600.,
          3680800., 4280000., 4793600., 4194400., 3937600., 4365600., 3252800., 1797600.,
          4365600., 4108800., 2054400., 3937600.],
        [6676800., 2824800., 4536800.,       0., 5221600., 4793600., 1540800., 1198400.,
          4879200., 5735200., 6334400., 5649600., 5221600., 5735200., 4280000., 2311200.,
          5735200., 5478400., 2568000., 5221600.],
        [5735200., 2482400., 3937600., 5221600.,       0., 4194400., 1369600., 1027200.,
          4194400., 4879200., 5478400., 4879200., 4536800., 4964800., 3766400., 1968800.,
          4964800., 4708000., 2311200.,   85600.],
        [5307200., 2311200., 3680800., 4793600., 4194400.,       0., 1284000., 1027200.,
          3937600., 4536800., 5050400., 4536800., 4194400., 4536800., 3509600., 1883200.,
          4622400., 4365600., 2140000., 4194400.],
        [1712000.,  856000., 1198400., 1540800., 1369600., 1284000.,       0.,  428000.,
          1284000., 1455200., 1626400., 1455200., 1369600., 1455200., 1198400.,  684800.,
          1455200., 1455200.,  770400., 1369600.],
        [1284000.,  684800.,  941600., 1198400., 1027200., 1027200.,  428000.,       0.,
          1027200., 1112800., 1284000., 1112800., 1027200., 1112800.,  941600.,  599200.,
          1112800., 1112800.,  599200., 1027200.],
        [5392800., 2311200., 3680800., 4879200., 4194400., 3937600., 1284000., 1027200.,
                0., 4622400., 5136000., 4536800., 4194400., 4622400., 3509600., 1883200.,
          4622400., 4365600., 2140000., 4194400.],
        [6248800., 2653600., 4280000., 5735200., 4879200., 4536800., 1455200., 1112800.,
          4622400.,       0., 5992000., 5307200., 4964800., 5392800., 4108800., 2140000.,
          5478400., 5136000., 2482400., 4879200.],
        [7019200., 2996000., 4793600., 6334400., 5478400., 5050400., 1626400., 1284000.,
          5136000., 5992000.,       0., 5906400., 5478400., 6077600., 4536800., 2396800.,
          6077600., 5735200., 2739200., 5478400.],
        [6163200., 2653600., 4194400., 5649600., 4879200., 4536800., 1455200., 1112800.,
          4536800., 5307200., 5906400.,       0., 5392800., 5906400., 4451200., 2311200.,
          5906400., 5564000., 2653600., 4879200.],
        [5735200., 2482400., 3937600., 5221600., 4536800., 4194400., 1369600., 1027200.,
          4194400., 4964800., 5478400., 5392800.,       0., 5649600., 3766400., 2054400.,
          5649600., 5307200., 2568000., 4536800.],
        [6505600., 2739200., 4365600., 5735200., 4964800., 4536800., 1455200., 1112800.,
          4622400., 5392800., 6077600., 5906400., 5649600.,       0., 4194400., 2225600.,
          5992000., 5735200., 2739200., 4964800.],
        [4879200., 2054400., 3252800., 4280000., 3766400., 3509600., 1198400.,  941600.,
          3509600., 4108800., 4536800., 4451200., 3766400., 4194400.,       0., 1712000.,
          4194400., 4023200., 1968800., 3766400.],
        [2482400., 1198400., 1797600., 2311200., 1968800., 1883200.,  684800.,  599200.,
          1883200., 2140000., 2396800., 2311200., 2054400., 2225600., 1712000.,       0.,
          2225600., 2140000., 1112800., 1968800.],
        [6334400., 2739200., 4365600., 5735200., 4964800., 4622400., 1455200., 1112800.,
          4622400., 5478400., 6077600., 5906400., 5649600., 5992000., 4194400., 2225600.,
                0., 5820800., 2824800., 4964800.],
        [5992000., 2568000., 4108800., 5478400., 4708000., 4365600., 1455200., 1112800.,
          4365600., 5136000., 5735200., 5564000., 5307200., 5735200., 4023200., 2140000.,
          5820800.,       0., 2653600., 4708000.],
        [2824800., 1284000., 2054400., 2568000., 2311200., 2140000.,  770400.,  599200.,
          2140000., 2482400., 2739200., 2653600., 2568000., 2739200., 1968800., 1112800.,
          2824800., 2653600.,       0., 2311200.],
        [5735200., 2482400., 3937600., 5221600.,   85600., 4194400., 1369600., 1027200.,
          4194400., 4879200., 5478400., 4879200., 4536800., 4964800., 3766400., 1968800.,
          4964800., 4708000., 2311200.,       0.],
    ], dtype=float)

    # Параметры для расчёта пропускной способности
    L = 1600.0  # длина пакета, бит
    T0 = 0.1    # допустимая задержка, с

    # Вызываем функцию расчёта B = A_packet + L/T0
    B_matrix = calculate_link_capacity(A_packet_example, L, T0)

    print("Матрица пропускной способности B (бит/с) [20×20]:")
    print(B_matrix)

    total_B = np.sum(B_matrix)
    print(f"\nСуммарная пропускная способность (бит/с): {total_B:.2f}")
