# ------------------------
# Приложение 1
# Пункт 5: Нахождение кратчайших маршрутов (Флойда – Уоршелла)
# ------------------------
import math
import numpy as np

def floyd_warshall(dist_matrix):
    """
    Алгоритм Флойда-Уоршелла.
    dist_matrix: список списков (или np.array) - исходная матрица расстояний.
    Возвращает матрицу кратчайших расстояний R[i][j].
    (Без сохранения промежуточных узлов.)
    """
    n = len(dist_matrix)
    # Создаём копию, чтобы не портить исходник
    R = [row[:] for row in dist_matrix]

    for k in range(n):
        for i in range(n):
            for j in range(n):
                if R[i][k] + R[k][j] < R[i][j]:
                    R[i][j] = R[i][k] + R[k][j]
    return R

if __name__ == "__main__":
    INF = math.inf
    
    # Пример: вставьте сюда Вашу 20x20 матрицу (graph)
    graph = [
        [0, 95.5874979496, 79.5642912388, 94.6461260319, 39.3193304539, np.inf, np.inf, np.inf, np.inf, 62.9523813725, np.inf, np.inf, 95.9786474705, 46.6714441776, 97.7563917637, np.inf, np.inf, 67.9149210453, np.inf, 12.3348772526],
        [95.5874979496, 0, 84.0328395367, 58.5388839245, 39.9922549725, np.inf, np.inf, 50.7433593273, 55.0055682659, 59.0373694897, np.inf, 13.4800612926, np.inf, 48.8370597363, np.inf, np.inf, np.inf, 26.3564765453, np.inf, 63.0501449108],
        [79.5642912388, 84.0328395367, 0, np.inf, 86.9909584522, np.inf, 9.08883214, np.inf, 36.5639030933, np.inf, np.inf, np.inf, np.inf, 50.6762325764, np.inf, 42.2351658344, 83.0486595631, 25.3041088581, np.inf, np.inf],
        [94.6461260319, 58.5388839245, np.inf, 0, 28.4607350826, 17.6770150661, np.inf, np.inf, np.inf, np.inf, 37.6704633236, 89.3714845181, np.inf, 58.3664834499, np.inf, 47.4359452724, np.inf, np.inf, 8.9873731136, 74.8607575893],
        [39.3193304539, 39.9922549725, 86.9909584522, 28.4607350826, 0, 15.2065336704, np.inf, np.inf, np.inf, 84.2344343662, 0.7139742374, np.inf, 25.4256784916, np.inf, 5.6122362614, 84.7947180271, np.inf, 9.0822279453, np.inf, np.inf],
        [np.inf, np.inf, np.inf, 17.6770150661, 15.2065336704, 0, np.inf, np.inf, np.inf, np.inf, 41.1598861217, 24.2978274817, 35.1119220314, 10.3595435614, 35.0349605141, 18.9526259899, 85.9894931317, 85.5223357697, np.inf, np.inf],
        [np.inf, np.inf, 9.08883214, np.inf, np.inf, np.inf, 0, 27.3581326, 80.19250035, 37.88679242, 59.36749578, 29.47033048, 50.67628026, 89.63277936, 67.4824059, np.inf, np.inf, np.inf, np.inf, np.inf],
        [np.inf, 50.7433593273, np.inf, np.inf, np.inf, np.inf, 27.3581326, 0, 37.20683455, 32.77925849, 81.57586455, 59.63644385, 88.076967, 57.18063712, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf],
        [np.inf, 55.0055682659, 36.5639030933, np.inf, np.inf, np.inf, 80.19250035, 37.20683455, 0, 52.88897157, 77.78683305, 23.19861054, 53.91460061, 33.26492906, 20.67342401, np.inf, np.inf, np.inf, np.inf, np.inf],
        [62.9523813725, 59.0373694897, np.inf, np.inf, 84.2344343662, np.inf, 37.88679242, 32.77925849, 52.88897157, 0, 40.24402499, 2.76581645, 44.98884082, 55.82234263, 93.11982989, 56.03725314, np.inf, np.inf, np.inf, np.inf],
        [np.inf, np.inf, np.inf, 37.6704633236, 0.7139742374, 41.1598861217, 59.36749578, 81.57586455, 77.78683305, 40.24402499, 0, 61.06179357, 16.36889577, 33.69382024, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf],
        [np.inf, 13.4800612926, np.inf, 89.3714845181, np.inf, 24.2978274817, 29.47033048, 59.63644385, 23.19861054, 2.76581645, 61.06179357, 0, 33.69382024, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf],
        [95.9786474705, np.inf, np.inf, np.inf, 25.4256784916, 35.1119220314, 50.67628026, 88.076967, 53.91460061, 44.98884082, 16.36889577, 33.69382024, 0, 64.94722962, 45.29090524, 45.90139985, 48.41914773, np.inf, np.inf, np.inf],
        [46.6714441776, 48.8370597363, 50.6762325764, 58.3664834499, np.inf, 10.3595435614, 89.63277936, 57.18063712, 33.26492906, 55.82234263, np.inf, np.inf, 64.94722962, 0, 82.66355395, 96.55558467, 57.84532428, np.inf, np.inf, np.inf],
        [97.7563917637, np.inf, np.inf, 47.4359452724, 5.6122362614, 35.0349605141, 67.4824059, np.inf, 20.67342401, 93.11982989, np.inf, np.inf, 45.29090524, 82.66355395, 0, 38.15076947, np.inf, np.inf, np.inf, np.inf],
        [np.inf, np.inf, 42.2351658344, 8.9873731136, 84.7947180271, 18.9526259899, np.inf, np.inf, np.inf, 56.03725314, np.inf, np.inf, 45.90139985, 96.55558467, 38.15076947, 0, 93.58620048, 31.27049804, 36.66872382, np.inf],
        [np.inf, 26.3564765453, 83.0486595631, np.inf, np.inf, 85.9894931317, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, 48.41914773, 57.84532428, np.inf, 93.58620048, 0, 4.541546106, 50.43850541, np.inf],
        [67.9149210453, np.inf, 25.3041088581, np.inf, 9.0822279453, 85.5223357697, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, 31.27049804, 4.541546106, 0, 76.97889209, np.inf],
        [np.inf, 63.0501449108, np.inf, 74.8607575893, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, 36.66872382, 50.43850541, 76.97889209, 0, 21.6811955],
        [12.3348772526, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, np.inf, 21.6811955, 0]
    ]

    shortest_paths = floyd_warshall(graph)
    print("Матрица кратчайших расстояний:")
    for row in shortest_paths:
        print(row)
            # --- Контрольная сумма матрицы кратчайших расстояний ---  
    s = 0
    for i in range(len(shortest_paths)):
        for j in range(len(shortest_paths)):
            val = shortest_paths[i][j]
            if val != math.inf:
                s += val
    print(f"\nКонтрольная сумма матрицы R = {s:.2f}")