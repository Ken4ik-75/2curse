# ------------------------
# Приложение 3
# Пункт 7: Число каналов (v), чтобы P_b <= 0.02
# ------------------------
import math

def erlang_b(A, v):
    """
    Формула Эрланга B.
    A (float): нагрузка в Эрл.
    v (int): количество каналов.
    Возвращает вероятность блокировки.
    """
    numerator = (A ** v) / math.factorial(v)
    denominator = 0.0
    for k in range(v+1):
        denominator += (A ** k) / math.factorial(k)
    return numerator / denominator

def find_channels(A, pb_limit=0.02):
    """
    Ищем минимальное v, чтобы ErlangB(A, v) <= pb_limit.
    """
    v = 0
    while True:
        eb = erlang_b(A, v)
        if eb <= pb_limit:
            return v
        v += 1

if __name__ == "__main__":
    # Словарь с нагрузкой на рёбрах (i,j) => A_ij
    # Взято из вашего списка "Нагрузка на рёбрах (link_load)"
    link_loads = {
      (0, 1): 26.90, (0, 2): 47.70, (0, 3): 65.90, (0, 4): 55.60, (0, 5): 51.20,
      (0, 6): 12.40, (0, 7): 8.60,  (0, 8): 51.60, (0, 9): 61.80, (0,10): 70.10,
      (0,11): 60.60, (0,12): 56.10, (0,13): 62.20, (0,14): 44.90, (0,15): 20.70,
      (0,16): 62.50, (0,17): 58.60, (0,18): 24.60, (0,19): 55.60,
      (1, 0): 27.00, (1, 2): 17.40, (1, 3): 24.10, (1, 4): 20.40, (1, 5): 18.80,
      (1, 6): 4.55,  (1, 7): 3.16,  (1, 8): 18.80, (1, 9): 22.70, (1,10): 25.60,
      (1,11): 22.20, (1,12): 21.00, (1,13): 23.00, (1,14): 16.40, (1,15): 7.58,
      (1,16): 23.00, (1,17): 21.50, (1,18): 9.00,  (1,19): 20.40,
      (2, 0): 47.70, (2, 1): 17.40, (2, 3): 42.70, (2, 4): 36.10, (2, 5): 33.20,
      (2, 6): 8.05,  (2, 7): 5.59,  (2, 8): 33.40, (2, 9): 40.10, (2,10): 45.40,
      (2,11): 39.30, (2,12): 36.30, (2,13): 40.30, (2,14): 28.90, (2,15): 13.40,
      (2,16): 40.60, (2,17): 38.00, (2,18): 15.90, (2,19): 36.10,
      (3, 0): 66.00, (3, 1): 24.10, (3, 2): 42.70, (3, 4): 49.80, (3, 5): 45.80,
      (3, 6): 11.10, (3, 7): 7.84,  (3, 8): 46.20, (3, 9): 55.40, (3,10): 62.70,
      (3,11): 54.40, (3,12): 50.20, (3,13): 55.70, (3,14): 40.20, (3,15): 18.50,
      (3,16): 55.90, (3,17): 52.50, (3,18): 21.90, (3,19): 49.80,
      (4, 0): 55.70, (4, 1): 20.40, (4, 2): 36.10, (4, 3): 49.80, (4, 5): 38.70,
      (4, 6): 9.41,  (4, 7): 6.54,  (4, 8): 38.90, (4, 9): 46.80, (4,10): 52.90,
      (4,11): 45.90, (4,12): 42.50, (4,13): 47.10, (4,14): 34.00, (4,15): 15.70,
      (4,16): 47.30, (4,17): 44.30, (4,18): 18.60, (4,19): 0.00,
      (5, 0): 51.20, (5, 1): 18.80, (5, 2): 33.20, (5, 3): 45.80, (5, 4): 38.70,
      (5, 6): 8.63,  (5, 7): 6.01,  (5, 8): 35.90, (5, 9): 43.00, (5,10): 48.70,
      (5,11): 42.30, (5,12): 39.00, (5,13): 42.90, (5,14): 31.20, (5,15): 14.40,
      (5,16): 43.20, (5,17): 40.60, (5,18): 16.90, (5,19): 38.70,
      (6, 0): 12.40, (6, 1): 4.55,  (6, 2): 8.05,  (6, 3): 11.10, (6, 4): 9.41,
      (6, 5): 8.63,  (6, 7): 1.45,  (6, 8): 8.70,  (6, 9): 10.40, (6,10): 11.80,
      (6,11): 10.60, (6,12): 9.46,  (6,13): 10.50, (6,14): 7.56,  (6,15): 3.48,
      (6,16): 10.50, (6,17): 9.88,  (6,18): 4.14,  (6,19): 9.41,
      (7, 0): 8.69,  (7, 1): 3.16,  (7, 2): 5.59,  (7, 3): 7.84,  (7, 4): 6.54,
      (7, 5): 6.01,  (7, 6): 1.45,  (7, 8): 6.06,  (7, 9): 7.24,  (7,10): 8.23,
      (7,11): 7.29,  (7,12): 6.51,  (7,13): 7.22,  (7,14): 5.20,  (7,15): 2.39,
      (7,16): 7.24,  (7,17): 6.82,  (7,18): 2.86,  (7,19): 6.54,
      (8, 0): 51.60, (8, 1): 18.80, (8, 2): 33.40, (8, 3): 46.20, (8, 4): 38.90,
      (8, 5): 35.90, (8, 6): 8.70,  (8, 7): 6.06,  (8, 9): 43.40, (8,10): 49.00,
      (8,11): 42.50, (8,12): 39.30, (8,13): 43.50, (8,14): 31.40, (8,15): 14.50,
      (8,16): 43.70, (8,17): 40.90, (8,18): 17.10, (8,19): 39.30,
      (9, 0): 61.80, (9, 1): 22.70, (9, 2): 40.10, (9, 3): 55.40, (9, 4): 46.80,
      (9, 5): 43.00, (9, 6): 10.40, (9, 7): 7.24,  (9, 8): 43.40, (9,10): 58.80,
      (9,11): 51.10, (9,12): 47.30, (9,13): 52.30, (9,14): 37.70, (9,15): 17.40,
      (9,16): 52.50, (9,17): 49.30, (9,18): 20.60, (9,19): 46.80,
      (10, 0): 70.10,(10, 1): 25.60,(10, 2): 45.40,(10, 3): 62.70,(10, 4): 52.90,
      (10, 5): 48.70,(10, 6): 11.80,(10, 7): 8.23, (10, 8): 49.00,(10, 9): 58.80,
      (10,11): 58.00,(10,12): 53.40,(10,13): 59.30,(10,14): 42.70,(10,15): 19.70,
      (10,16): 59.40,(10,17): 55.80,(10,18): 23.40,(10,19): 52.90,
      (11, 0): 60.60,(11, 1): 22.20,(11, 2): 39.30,(11, 3): 54.40,(11, 4): 45.90,
      (11, 5): 42.30,(11, 6): 10.60,(11, 7): 7.29, (11, 8): 42.50,(11, 9): 51.10,
      (11,10): 58.00,(11,12): 51.80,(11,13): 57.50,(11,14): 41.40,(11,15): 19.10,
      (11,16): 57.60,(11,17): 54.20,(11,18): 22.70,(11,19): 45.90,
      (12, 0): 56.10,(12, 1): 21.00,(12, 2): 36.30,(12, 3): 50.20,(12, 4): 42.50,
      (12, 5): 39.00,(12, 6): 9.46, (12, 7): 6.51, (12, 8): 39.30,(12, 9): 47.30,
      (12,10): 53.40,(12,11): 51.80,(12,13): 54.40,(12,14): 34.20,(12,15): 15.80,
      (12,16): 54.60,(12,17): 51.10,(12,18): 21.40,(12,19): 42.50,
      (13, 0): 64.10,(13, 1): 23.00,(13, 2): 40.30,(13, 3): 55.70,(13, 4): 47.10,
      (13, 5): 42.90,(13, 6): 10.50,(13, 7): 7.22, (13, 8): 43.50,(13, 9): 52.30,
      (13,10): 59.30,(13,11): 57.50,(13,12): 54.40,(13,14): 39.00,(13,15): 18.00,
      (13,16): 59.10,(13,17): 55.50,(13,18): 23.20,(13,19): 47.10,
      (14, 0): 46.20,(14, 1): 16.40,(14, 2): 28.90,(14, 3): 40.20,(14, 4): 34.00,
      (14, 5): 31.20,(14, 6): 7.56, (14, 7): 5.20, (14, 8): 31.40,(14, 9): 37.70,
      (14,10): 42.70,(14,11): 41.40,(14,12): 34.20,(14,13): 39.00,(14,15): 12.60,
      (14,16): 39.10,(14,17): 36.90,(14,18): 15.00,(14,19): 34.00,
      (15, 0): 20.70,(15, 1): 7.58, (15, 2): 13.40,(15, 3): 18.50,(15, 4): 15.70,
      (15, 5): 14.40,(15, 6): 3.48, (15, 7): 2.39, (15, 8): 14.50,(15, 9): 17.40,
      (15,10): 19.70,(15,11): 19.10,(15,12): 15.80,(15,13): 18.00,(15,14): 12.60,
      (15,16): 18.10,(15,17): 17.10,(15,18): 7.00, (15,19): 15.70,
      (16, 0): 62.50,(16, 1): 23.00,(16, 2): 40.60,(16, 3): 55.90,(16, 4): 47.30,
      (16, 5): 43.20,(16, 6): 10.50,(16, 7): 7.24, (16, 8): 43.70,(16, 9): 52.50,
      (16,10): 59.40,(16,11): 57.60,(16,12): 54.60,(16,13): 59.10,(16,14): 39.10,
      (16,15): 18.10,(16,17): 57.20,(16,18): 23.90,(16,19): 47.30,
      (17, 0): 58.60,(17, 1): 21.50,(17, 2): 38.00,(17, 3): 52.50,(17, 4): 44.30,
      (17, 5): 40.60,(17, 6): 9.88, (17, 7): 6.82, (17, 8): 40.90,(17, 9): 49.30,
      (17,10): 55.80,(17,11): 54.20,(17,12): 51.10,(17,13): 55.50,(17,14): 36.90,
      (17,15): 17.10,(17,16): 57.20,(17,18): 22.00,(17,19): 44.30,
      (18, 0): 24.60,(18, 1): 9.00, (18, 2): 15.90,(18, 3): 21.90,(18, 4): 18.60,
      (18, 5): 16.90,(18, 6): 4.14, (18, 7): 2.86, (18, 8): 17.10,(18, 9): 20.60,
      (18,10): 23.40,(18,11): 22.70,(18,12): 21.40,(18,13): 23.20,(18,14): 15.00,
      (18,15): 7.00, (18,16): 23.90,(18,17): 22.00,(18,19): 18.60,
      (19, 0): 55.60,(19, 1): 20.40,(19, 2): 36.10,(19, 3): 49.80,(19, 4): 0.00,
      (19, 5): 38.70,(19, 6): 9.41, (19, 7): 6.54, (19, 8): 39.30,(19, 9): 46.80,
      (19,10): 52.90,(19,11): 45.90,(19,12): 42.50,(19,13): 47.10,(19,14): 34.00,
      (19,15): 15.70,(19,16): 47.30,(19,17): 44.30,(19,18): 18.60
    }

    n = 20  # Количество узлов

    # ---------------------------------------
    # 1) Формируем матрицу v[i][j], где
    #    v[i][j] = количество каналов при A_ij,
    #    либо 0, если (i,j) нет в словаре link_loads.
    # ---------------------------------------
    v_matrix = []
    for i in range(n):
        row = []
        for j in range(n):
            if (i, j) in link_loads:
                A_ij = link_loads[(i, j)]
                v_ij = find_channels(A_ij, 0.02)  # число каналов
            else:
                # Если в словаре нет (i,j), примем нагрузку 0
                v_ij = 0
            row.append(v_ij)
        v_matrix.append(row)

    # ---------------------------------------
    # 2) Печатаем матрицу v_matrix в удобном виде
    # ---------------------------------------
    print("Матрица числа каналов (v) для P_b <= 0.02:\n")
    for i in range(n):
        # Каждый элемент выведем как целое число (мин. ширина 3 для читабельности)
        row_str = " ".join(f"{v_matrix[i][j]:3d}" for j in range(n))
        print(row_str)

    # ---------------------------------------
    # 3) Считаем контрольную сумму (сумму всех v[i][j])
    # ---------------------------------------
    control_sum = 0
    for i in range(n):
        for j in range(n):
            control_sum += v_matrix[i][j]

    print(f"\nКонтрольная сумма (сумма всех каналов) = {control_sum}")