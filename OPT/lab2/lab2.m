clc;
clear;

% ============================================================
% ЗАДАЧА ЛИНЕЙНОГО ПРОГРАММИРОВАНИЯ С ОГРАНИЧЕНИЯМИ
% ============================================================
disp('============================================================');
disp('ЗАДАЧА ЛИНЕЙНОГО ПРОГРАММИРОВАНИЯ С ОГРАНИЧЕНИЯМИ');
disp('============================================================');
disp('Максимизировать: F = 3*x1 + 2*x2');
disp('При условиях:');
disp('  3*x1 + x2 + x3 = 21');
disp('  2*x1 + 2*x2 + x4 = 30');
disp('  3*x2 + x5 = 16');
disp('  0 <= x1 <= 7');
disp('  0 <= x2 <= 16/3');
disp('  0 <= x3 <= 21');
disp('  0 <= x4 <= 30');
disp('  0 <= x5 <= 16');
disp('============================================================');

% Определение коэффициентов целевой функции
c = [3; 2; 0; 0; 0];

% Матрица коэффициентов ограничений A и вектор правых частей b
A = [ 3, 1, 1, 0, 0;
      2, 2, 0, 1, 0;
      0, 3, 0, 0, 1 ];
b = [21; 30; 16];

% Верхние границы для переменных
u = [15; 21; 21; 30; 16];

% Типы ограничений и переменных для непрерывной задачи
ctype = 'SSS';      % Ограничения: равенства
vartype = 'CCCCC';   % Все переменные непрерывные

% --- Решение задачи с непрерывными переменными ---
disp('Решаем задачу с непрерывными переменными...');
[xopt_cont, fopt_cont, extra_cont] = glpk(c, A, b, [], u, ctype, vartype, -1);
disp('====== ПРЯМАЯ ЗАДАЧА (непрерывное решение) ======');
disp('Оптимальный план (x1, x2, x3, x4, x5):');
disp(xopt_cont');
disp('Максимальная прибыль:');
disp(fopt_cont);

% --- Решение задачи с целочисленными переменными ---
disp('============================================================');
disp('ЦЕЛОЧИСЛЕННАЯ ЗАДАЧА');
ctype_int = ['SSS', 'UUUUU'];  % Первые 3 равенства, следующие 5 неравенства (<=)
vartype_int = 'IIIII';         % Все переменные целочисленные

% Расширенная матрица и правые части для целочисленной задачи
A_int = [A; eye(5)];
b_int = [b; u];
disp('Решаем задачу с целочисленными переменными...');
[xopt_int, fopt_int] = glpk(c, A_int, b_int, [], [], ctype_int, vartype_int, -1);
disp('====== ПРЯМАЯ ЗАДАЧА (целочисленное решение) ======');
disp('Оптимальный целочисленный план (x1, x2, x3, x4, x5):');
disp(xopt_int');
disp('Максимальная прибыль (целочисл.):');
disp(fopt_int);

% --- Решение двойственной задачи (по примеру методички для четного варианта) ---
disp('============================================================');
disp('РЕШЕНИЕ ДВОЙСТВЕННОЙ ЗАДАЧИ');

% Вывод формулировки двойственной задачи
disp('Двойственная задача:');
disp('Целевая функция: min Z = 21*y1 + 30*y2 + 16*y3');
disp('Ограничения:');
disp('  3*y1 + 2*y2 >= 3');
disp('  y1 + 2*y2 + 3*y3 >= 2');
disp('Переменные: y1, y2, y3');

% Решение двойственной задачи для непрерывного (вещественного) случая:
disp('Решаем двойственную задачу (вещественное решение)...');
[dual_sol_cont, dual_obj_cont, extra, redcosts] = glpk([b; u], [A', eye(5)], c, [-Inf(1,3), zeros(1,5)], [], 'LLLLL', 'CCCCCCCC');
disp('------ Двойственная задача (вещественное решение) ------');
disp('Оптимальный план (y1, y2, y3, y4, y5, y6, y7, y8):');
disp(dual_sol_cont');
disp('Минимальное значение целевой функции:');
disp(dual_obj_cont);

% Решение двойственной задачи для целочисленного случая:
disp('Решаем двойственную задачу (целочисленное решение)...');
[dual_sol_int, dual_obj_int, extra_int, redcosts_int] = glpk([b; u], [A', eye(5)], c, [-Inf(1,3), zeros(1,5)], [], 'LLLLL', 'IIICCCCC');

disp('------ Двойственная задача (целочисленное решение) ------');
disp('Оптимальный целочисленный план (y1, y2, y3, y4, y5, y6, y7, y8):');
disp(dual_sol_int');
disp('Минимальное значение целевой функции:');
disp(dual_obj_int);
disp('============================================================');